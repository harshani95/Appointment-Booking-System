Index: BackEnd/bookingSystem/src/main/java/com/harshani/bookingSystem/controller/AppointmentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BackEnd/bookingSystem/src/main/java/com/harshani/bookingSystem/controller/AppointmentController.java b/BackEnd/bookingSystem/src/main/java/com/harshani/bookingSystem/controller/AppointmentController.java
new file mode 100644
--- /dev/null	(date 1738926228575)
+++ b/BackEnd/bookingSystem/src/main/java/com/harshani/bookingSystem/controller/AppointmentController.java	(date 1738926228575)
@@ -0,0 +1,66 @@
+package com.harshani.bookingSystem.controller;
+
+import com.harshani.bookingSystem.dto.request.RequestAppointmentDto;
+import com.harshani.bookingSystem.dto.response.ResponseAppointmentDto;
+import com.harshani.bookingSystem.service.impl.AppointmentServiceImpl;
+import com.harshani.bookingSystem.util.StandardResponse;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.time.format.DateTimeFormatter;
+import java.util.List;
+
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/api/v1")
+public class AppointmentController {
+
+    private final AppointmentServiceImpl appointmentService;
+
+    @PostMapping(path = "/appointments")
+    public ResponseEntity<StandardResponse> saveAppointment(@RequestBody RequestAppointmentDto appointmentDto){
+        appointmentService.saveAppointment(appointmentDto);
+        return new ResponseEntity<>(
+                new StandardResponse(201,"Appointment Created!",appointmentDto),
+                HttpStatus.CREATED
+        );
+    }
+
+    @DeleteMapping("/delete/appointments/{id}")
+    public ResponseEntity<StandardResponse> deleteAppointment(@PathVariable(value = "id") long id){
+        appointmentService.deleteAppointment(id);
+        return new ResponseEntity<>(
+                new StandardResponse(204, "Deleted data",id),
+                HttpStatus.NO_CONTENT
+        );
+    }
+
+    @GetMapping(path = "/appointments")
+    public ResponseEntity<StandardResponse> getAllAppointments() {
+        List<ResponseAppointmentDto> allAppointments = appointmentService.getAllAppointments();
+
+        return new ResponseEntity<>(
+                new StandardResponse(200, "All Appointments", allAppointments),
+                HttpStatus.OK
+        );
+    }
+
+    @GetMapping("/slots")
+    public ResponseEntity<StandardResponse> getAvailableSlots(@RequestParam String date) {
+        LocalDate localDate = LocalDate.parse(date, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
+
+        List<String> availableSlots = appointmentService.getAvailableTimeSlots(localDate)
+                .stream()
+                .map(LocalTime::toString)
+                .toList();
+
+        return new ResponseEntity<>(
+                new StandardResponse(200, "Available Time Slots", availableSlots),
+                HttpStatus.OK
+        );
+    }
+}
